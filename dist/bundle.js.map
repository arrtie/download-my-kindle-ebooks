{
  "version": 3,
  "sources": ["../src/elementHelpers.ts", "../src/getBooksFromPage.ts", "../src/index.ts"],
  "sourcesContent": ["export function getElementFrom(parent: HTMLElement) {\n    return function getElement(selector: string){\n        return parent.querySelector<HTMLElement>(selector);\n    }\n}\n\nexport function getElementsFrom(parent: HTMLElement) {\nreturn function getElements(selector: string){\n    return Array.from(parent.querySelectorAll<HTMLElement>(selector).values());\n}\n}\n\nexport const findInChildren = (parent: HTMLElement, selector: string) => {\n    const children = Array.from(parent.querySelectorAll<HTMLElement>(\"*\")).filter(element => element.textContent === selector);\n    if(children.length === 0 ){\n        console.warn(`cannot find child element with text content \"${selector}\" in parent \"${parent.tagName}\"`)\n        return null;\n    }\n    return children[0];\n}\n\n\nexport function makeTitleMap(){\n    const getElementsFromDoc = getElementsFrom(document.documentElement)\n    const tableBody = getFirst(getElementsFromDoc(\"tbody\"), \"missing tbody\")\n    const getFromTable = getElementsFrom(tableBody);\n    const rows = getFromTable(\"tr\")\n    const titleMap = new Map<string, HTMLElement>();\n    rows.forEach((row) => {\n        const titleElement = getElementFrom(row)(\"[class='digital_entity_title']\")\n        if(titleElement?.textContent != null) {\n            titleMap.set(titleElement.textContent, row)\n        }\n    })\n    return titleMap;\n}\n\nconst getFirst = (someArray: HTMLElement[], errorText:string) => {\n    if(someArray?.length == 0) {\n        throw new Error(errorText)\n    }\n    return someArray[0];\n}\n", "import { findInChildren, getElementFrom, makeTitleMap } from \"./elementHelpers\";\nconst DOWNLOAD_OPTION_TEXT = \"Download & transfer via USB\";\nconst DOWNLOAD_DIALOG_CONTAINER = \"[id^='DOWNLOAD_AND_TRANSFER_DIALOG']\";\nconst DOWNLOAD_BUTTON = \"[id$='CONFIRM']\";\n\ninterface FullRow {\n  title: string;\n  row: HTMLElement;\n  openDialogButton: HTMLElement;\n  dialog: HTMLElement;\n}\n\n\nfunction confirmAndClick(getter: () => HTMLElement | null, errorText: string) {\n    const el = getter();\n    if (el == null) {\n        console.warn(errorText)\n      return false;\n    }\n    el.click();\n    return true;\n  }\n  \n\nasync function tryAgain(action: () => HTMLElement | null, count: number, elementName:string) {\n  if (count == 0) {\n    console.warn(`ran out of retries getting ${elementName}`);\n    return Promise.resolve(false);\n  }\n  \n  if(confirmAndClick(action, `failed to find ${elementName}`)){\n    console.log(\"Success!\");\n    return Promise.resolve(true);\n  }\n\n  return new Promise((resolve) => {\n    console.warn(\"trying again\");\n    setTimeout(() => {\n      resolve(tryAgain(action, count - 1, elementName));\n    }, 1000);\n  });\n}\n\nexport default async function downloadBooksFromCurrentPage() {\n  const titleMap = makeTitleMap();\n  if (titleMap == null) {\n    console.error(\"no title map\");\n    return;\n  }\n  const rowsWithDialog = Array.from(titleMap.entries())\n    .map(([title, row]) => {\n      return {\n        title,\n        row,\n        openDialogButton: findInChildren(row, DOWNLOAD_OPTION_TEXT),\n        dialog: getElementFrom(row)(DOWNLOAD_DIALOG_CONTAINER),\n      };\n    })\n    .filter(\n      (maybeDialogElements): maybeDialogElements is FullRow =>\n        maybeDialogElements.openDialogButton != null &&\n        maybeDialogElements.dialog != null\n    );\n\n  while (rowsWithDialog.length > 0) {\n    const currentRow = rowsWithDialog.shift();\n    if (currentRow == null) {\n      break;\n    }\n    currentRow.openDialogButton.click();\n    const getFromDialog = getElementFrom(currentRow.dialog);\n    const getRadioButton = () => getFromDialog(\"input[type='radio']\");\n    if (!confirmAndClick(getRadioButton, \"missing radio button\")) {\n      break;\n    }\n    const getConfirmButton = () => getFromDialog(DOWNLOAD_BUTTON);\n\n    if (!confirmAndClick(getConfirmButton, \"missing confirm download button\")) {\n      break;\n    }\n    const result = await tryAgain(() => {\n      return getElementFrom(document.documentElement)(\n        \"[id='notification-close']\"\n      );\n    }, 3, \"success notification close button\");\n  }\n}\n", "import downloadBooksFromCurrentPage from \"./getBooksFromPage\";\n\nasync function runActions() {\n  downloadBooksFromCurrentPage();\n}\n\nrunActions();\n"],
  "mappings": "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",
  "names": ["getElementFrom", "parent", "selector", "getElementsFrom", "findInChildren", "children", "element", "makeTitleMap", "getElementsFromDoc", "tableBody", "getFirst", "rows", "titleMap", "row", "titleElement", "someArray", "errorText", "DOWNLOAD_OPTION_TEXT", "DOWNLOAD_DIALOG_CONTAINER", "DOWNLOAD_BUTTON", "confirmAndClick", "getter", "errorText", "el", "tryAgain", "action", "count", "elementName", "resolve", "downloadBooksFromCurrentPage", "titleMap", "makeTitleMap", "rowsWithDialog", "title", "row", "findInChildren", "getElementFrom", "maybeDialogElements", "currentRow", "getFromDialog", "result", "runActions", "downloadBooksFromCurrentPage"]
}
